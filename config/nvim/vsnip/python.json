{
  "from IPython.core.debugger import Pdb; ipdb = Pdb(); ...": {
      "prefix": ["ipdb"],
      "body": [
          "import inspect; from IPython.core.debugger import Pdb; ipdb = Pdb(); frame = inspect.currentframe(); print('[%s:%s:%d] ipdb >>>' % (frame.f_code.co_filename.split('/')[-1], frame.f_code.co_name, frame.f_lineno)); ipdb.set_trace()  # NOQA"

      ]
  },
  "import IPython; print(\"[ipython] >>> \"); IPython.embed()": {
      "prefix": ["ipydb"],
      "body": [
          "import inspect; import IPython; frame = inspect.currentframe(); print('[%s:%s:%d] ipython >>>' % (frame.f_code.co_filename.split('/')[-1], frame.f_code.co_name, frame.f_lineno)); IPython.embed()  # NOQA"
      ]
  },
  "parser = argparse.ArgumentParser(...) ...": {
      "prefix": ["parser"],
      "body": [
        "parser = argparse.ArgumentParser(",
        "    formatter_class=argparse.ArgumentDefaultsHelpFormatter,",
        ")",
        "parser.add_argument(\"${1}\")",
        "args = parser.parse_args()"
      ]
  },
  "#!/usr/bin/env python": {
      "prefix": ["shebang"],
      "body": [
          "#!/usr/bin/env python"
      ]
  },
  "#!/usr/bin/env python3": {
      "prefix": ["shebang3"],
      "body": [
          "#!/usr/bin/env python3"
      ]
  },
  "if __name__ == \"__main__\"": {
    "prefix": ["ifmain"],
    "body": [
      "if __name__ == \"__main__\":",
      "    ${0:main()}"
    ]
  },
  "print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")": {
    "prefix": ["debugprint"],
    "body": [
      "print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")",
      "print(${1})",
      "print(\"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\")"
    ]
  },
  "log.debug(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")": {
    "prefix": ["debuglog"],
    "body": [
      "log.debug(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")",
      "log.debug(${1})",
      "log.debug(\"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\")"
    ]
  }
}
