#!/usr/bin/env python

from __future__ import division

import argparse
import math
import platform
import time

import cv2
import imgviz


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('img_files', nargs='+', help='image file to show')
    parser.add_argument('-x', '--shape', default=None, help='tile shape')
    parser.add_argument('-H', '--max-height', type=float, default=900,
                        help='max height')
    parser.add_argument('-W', '--max-width', type=float, default=1600,
                        help='max width')
    args = parser.parse_args()

    if args.shape is not None:
        args.shape = map(int, args.shape.split('x'))
        assert len(args.shape) == 2

    n_fail = 0

    while True:
        # print('[{}]: {}'.format(int(time.time()), args.img_files))
        imgs = []
        for img_file in args.img_files:
            img = cv2.imread(img_file)
            if img is None:
                continue
            img = img[:, :, ::-1]  # BGR -> RGB
            imgs.append(img)

        if not imgs:
            if n_fail >= 3:
                print('No such files: {}'.format(','.join(args.img_files)))
                break
            n_fail += 1
            continue
        n_fail = 0

        viz = imgviz.tile(imgs, shape=args.shape)

        H, W = viz.shape[:2]
        scale_H, scale_W = 1, 1
        if args.max_height > 0:
            scale_H = args.max_height / H
        if args.max_width > 0:
            scale_W = args.max_width / W
        scale = min(scale_H, scale_W)
        viz = cv2.resize(viz, None, None, fx=scale, fy=scale)

        win_name = ','.join(args.img_files)
        cv2.imshow(win_name, viz[:, :, ::-1])
        if cv2.waitKey(1000) == ord('q'):
            break



if __name__ == '__main__':
    main()
